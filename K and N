import java.util.*;
public class Main {
 private char[][] board;
 private char currentPlayer;
 public Main() {
 board = new char[3][3];
 currentPlayer = 'X';
 // Инициализация игрового поля
 for (int i = 0; i < 3; i++) {
 for (int j = 0; j < 3; j++) {
 board[i][j] = '-';
 }
 }
 }
 public void drawBoard() {
 System.out.println("---------");
 for (int i = 0; i < 3; i++) {
 System.out.print("| ");
 for (int j = 0; j < 3; j++) {
 System.out.print(board[i][j] + " | ");
 }
 System.out.println();
 System.out.println("---------");
 }
 }
 private boolean checkTieCondition() {
 for (int i = 0; i < 3; i++) {
 for (int j = 0; j < 3; j++) {
 if (board[i][j] == '-') {
 return false;
 }
 }
 }
 return true;
 }
 public boolean isWinner(char player) {
// Проверка строк
 for (int i = 0; i < 3; i++) {
 if (board[i][0] == player && board[i][1] == player
&& board[i][2] == player) {
 return true;
 }
 }
 // Проверка столбцов
 for (int j = 0; j < 3; j++) {
 if (board[0][j] == player && board[1][j] == player
&& board[2][j] == player) {
 return true;
 }
 }
 // Проверка диагоналей
 if (board[0][0] == player && board[1][1] == player &&
board[2][2] == player) {
 return true;
 }
 if (board[0][2] == player && board[1][1] == player &&
board[2][0] == player) {
 return true;
 }
 return false;
 }
 public void makeMove(int row, int col, char player) {
 if (board[row][col] == '-') {
 board[row][col] = player;
 }
 }
 public boolean isMoveValid(int row, int col) {
 return (row >= 0 && row < 3 && col >= 0 && col < 3 &&
board[row][col] == '-');
 }
 public void play() {
 Scanner scanner = new Scanner(System.in);
 while (!checkTieCondition() && !isWinner('X') && 
!isWinner('O')) {
 drawBoard();
 if (currentPlayer == 'X') {
 System.out.print("Ход X. Введите номер строки
(от 0 до 2): ");
 int row = scanner.nextInt();
 System.out.print("Введите номер столбца (от 0
до 2): ");
 int col = scanner.nextInt();
 if (isMoveValid(row, col)) {
 makeMove(row, col, currentPlayer);
currentPlayer = 'O';
 } else {
 System.out.println("Некорректный ход.
Попробуйте снова.");
 }
 } else {
 System.out.println("Ход O.");
 int bestScore = Integer.MIN_VALUE;
 int bestRow = -1;
 int bestCol = -1;
 for (int i = 0; i < 3; i++) {
 for (int j = 0; j < 3; j++) {
 if (board[i][j] == '-') {
 board[i][j] = 'O';
int score = minimax(board, false);
board[i][j] = '-';
 if (score > bestScore) {
 bestScore = score;
bestRow = i;
bestCol = j;
 }
 }
 }
 }
 makeMove(bestRow, bestCol, currentPlayer);
 currentPlayer = 'X';
 }
}
 drawBoard();
 if (isWinner('X')) {
 System.out.println("Игрок Х победил!");
 } else if (isWinner('O')) {
 System.out.println("Игрок O победил!");
 } else {
 System.out.println("Ничья!");
 }
 scanner.close();
 }
 public int minimax(char[][] board, boolean isMaximizing) {
 if (isWinner('X')) {
 return -1;
 }
 if (isWinner('O')) {
 return 1;
 }
 if (checkTieCondition()) {
 return 0;
 }
 if (isMaximizing) {
 int bestScore = Integer.MIN_VALUE;
 for (int i = 0; i < 3; i++) {
 for (int j = 0; j < 3; j++) {
 if (board[i][j] == '-') {
 board[i][j] = 'O';
 int score = minimax(board, false);
 board[i][j] = '-';
bestScore = Math.max(score,
bestScore);
 }
 }
 }
 return bestScore;
} else {
 int bestScore = Integer.MAX_VALUE;
 for (int i = 0; i < 3; i++) {
 for (int j = 0; j < 3; j++) {
 if (board[i][j] == '-') {
 board[i][j] = 'X';
int score = minimax(board, true);
board[i][j] = '-';
bestScore = Math.min(score,
bestScore);
 }
 }
 }
 return bestScore;
 }
 }
 public static void main(String[] args) {
 Main game = new Main();
 game.play();
 }
}
